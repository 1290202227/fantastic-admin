import{r as n,o as s,c as a,a as p,b as t,F as e,e as o,d as c}from"./app.fd400949.js";const l={},u=p("h1",{id:"mock-与联调",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#mock-与联调","aria-hidden":"true"},"#"),o(" Mock 与联调")],-1),i=o("框架使用 "),r={href:"https://github.com/nuysoft/Mock",target:"_blank",rel:"noopener noreferrer"},k=o("Mockjs"),b=o(" 做为模拟数据生成，mock 数据编写规则请阅读官方文档。"),m=c('<p>框架提供两套 mock 解决方案，请对比下述的介绍后自行选择。需注意，两套方案的 mock 数据无法通用，在编写上有一定差异。</p><p>Mockjs 虽然很好用，但是在大型项目中其实并不合适，正规的测试应该是搭建专门的测试服务器进行测试，只是在一些中小型公司，没有这样的资源，使用 Mockjs 是一个折中的办法。</p><blockquote><p>以下两套方案均需要在 <code>.env.development</code> 中设置 <code>VUE_APP_API_ROOT</code> 为真实接口地址，例如 <code>VUE_APP_API_ROOT = http://baidu.com/api/</code></p></blockquote><h2 id="方案一-mockjs" tabindex="-1"><a class="header-anchor" href="#方案一-mockjs" aria-hidden="true">#</a> 方案一 mockjs</h2><h3 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明" aria-hidden="true">#</a> 使用说明</h3><p>这是最常见的使用方式，你只需在 <code>./src/main.js</code> 中找到 <code>import &#39;./mock&#39;</code> 并将其注释去掉，然后到 <code>./src/mock/modules/</code> 目录下新增 js 文件，然后在里面编写 mock 数据代码即可，例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ./src/mock/modules/test.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        url<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n        result<span class="token operator">:</span> <span class="token punctuation">{</span>\n            error<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n            state<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            data<span class="token operator">:</span> <span class="token punctuation">{</span>\n                title<span class="token operator">:</span> <span class="token string">&#39;测试&#39;</span><span class="token punctuation">,</span>\n                images<span class="token operator">:</span> <span class="token string">&#39;@image(\\&#39;200x200\\&#39;,\\&#39;red\\&#39;,\\&#39;#fff\\&#39;,\\&#39;avatar\\&#39;)&#39;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>当你配置好 mock 数据后，在页面中就可以通过 <code>this.$api</code> 进行测试了</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;mock/test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这时候可以在控制台看到 mock 数据正常打印出来了。</p>',10),d=["src"],g=c('<p>你可能会问，我在 <code>test.js</code> 里定义的 <code>url</code> 是 <code>test</code> ，为什么在调用接口的时候，需要写成 <code>mock/test</code> ，这其实是框架的 mock 约定，在 <code>./src/mock/index.js</code> 里可以看到这句代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_API_ROOT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">mock/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mock<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> mock<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> mock<span class="token punctuation">.</span>result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中需要拦截的 URL 是拼接出来的，中间强制带上了 <code>mock/</code> ，这么做的目的是为了方便开发中进行 mock 和真实接口进行切换。例如还是同样的 <code>test</code> 接口，当后端开发完毕，只需将调用接口的地方把 <code>mock/</code> 删掉即可。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>因为请求 URL 改变了，mock 拦截不到，所以这个请求就会切换为真实接口。</p><div class="custom-container tip"><p class="custom-container-title">扩展</p><p>如果你不喜欢框架的这个 mock 约定，你也可以将 <code>./src/mock/index.js</code> 里改为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_API_ROOT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mock<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> mock<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> mock<span class="token punctuation">.</span>result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样调用的时候直接这样就可以：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果要切换为真实接口，到 <code>./src/mock/modules/test.js</code> 里注释或删除对应的 mock 数据即可。</p></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>mock 数据一般仅存在于开发环境，打包的时候注意将 <code>./src/main.js</code> 中的 <code>import &#39;./mock&#39;</code> 删除或注释掉</p></div><h3 id="弊端" tabindex="-1"><a class="header-anchor" href="#弊端" aria-hidden="true">#</a> 弊端</h3><p>它的最大问题是就是它的实现机制，因为通过重写浏览器的 <code>XMLHttpRequest</code> 对象，从而才能拦截请求。大部分情况下用起来还是蛮方便的，但就因为它重写了 <code>XMLHttpRequest</code> 对象，所以比如 <code>progress</code> 方法，或者一些底层依赖 <code>XMLHttpRequest</code> 的库都会和它发生不兼容。</p><p>其次因为它是本地模拟的数据，实际上不会走任何网络请求，开发过程中，只能通过 <code>console.log</code> 进行调试。</p><h2 id="方案二-mock-server" tabindex="-1"><a class="header-anchor" href="#方案二-mock-server" aria-hidden="true">#</a> 方案二 mock-server</h2>',11),h=o("这个方案依托于 "),v={href:"https://github.com/xuxihai123/vue-cli-plugin-mock",target:"_blank",rel:"noopener noreferrer"},f=o("vue-cli-plugin-mock"),j=o(" 插件实现，主要目的是解决方案一的几个开发弊端，因为是一个真正的 server ，所以你可以通过浏览器开发者工具中的 network ，清楚的看到接口返回的数据结构，并且同时解决了之前 "),y=p("code",null,"mockjs",-1),w=o(" 会重写 "),x=p("code",null,"XMLHttpRequest",-1),R=o(" 对象，导致很多第三方库失效的问题。"),_=c('<h3 id="使用说明-1" tabindex="-1"><a class="header-anchor" href="#使用说明-1" aria-hidden="true">#</a> 使用说明</h3><p>首先将 <code>./src/main.js</code> 里的 <code>import &#39;./mock&#39;</code> 注释掉，然后到 <code>./src/api/index.js</code> 里，把 <code>baseURL</code> 注释掉或设为空</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> api <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// baseURL: p<wbr>rocess.env.VUE_APP_API_ROOT,</span>\n    timeout<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>\n    responseType<span class="token operator">:</span> <span class="token string">&#39;json&#39;</span>\n    <span class="token comment">// withCredentials: true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>最后打开 <code>vue.config.js</code> 修改并设置成高亮部分代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n        open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token string">&#39;/mock&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                target<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n                changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;/&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                target<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_API_ROOT</span><span class="token punctuation">,</span>\n                changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token operator">...</span>\n    pluginOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        lintStyleOnBuild<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        stylelint<span class="token operator">:</span> <span class="token punctuation">{</span>\n            fix<span class="token operator">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        mock<span class="token operator">:</span> <span class="token punctuation">{</span>\n            entry<span class="token operator">:</span> <span class="token string">&#39;./src/mock/server.js&#39;</span><span class="token punctuation">,</span>\n            debug<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            disable<span class="token operator">:</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>剩下的操作和方案一类似，在 <code>./src/mock/server-modules/</code> 目录下新增 js 文件，然后在里面编写 mock 数据代码即可，注意下编写的规则。</p><p>编写好 mock 后，执行下面那段请求代码，就可以在 Network 里看到真实的网络请求了，并且返回的是我们编写的 mock 数据。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;mock/test&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果需要在 mock 和真实接口切换调试只需删除 <code>mock/</code> 即可</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>因为我们设置的本地代理规则是，<code>/mock</code> 转发到 <code>/</code> 也就是本地，而 <code>/</code> 转发到 <code>p<wbr>rocess.env.VUE_APP_API_ROOT</code> ，也就是我们的真实接口地址。</p><h3 id="弊端-1" tabindex="-1"><a class="header-anchor" href="#弊端-1" aria-hidden="true">#</a> 弊端</h3><p>此方案只是优化了本地开发，因为是本地启用 server ，但如果线上环境需要使用 mock ，只能通过方案一实现。</p><h2 id="弃用方案-参考" tabindex="-1"><a class="header-anchor" href="#弃用方案-参考" aria-hidden="true">#</a> 弃用方案（参考）</h2>',14),P=o("这个方案是在 vue-element-admin 里发现的，也是 vue-element-admin 提供并默认使用的"),O={href:"https://panjiachen.github.io/vue-element-admin-site/zh/guide/essentials/mock-api.html#%E6%96%B0%E6%96%B9%E6%A1%88",target:"_blank",rel:"noopener noreferrer"},L=o("新方案"),q=o("，我一开始是在它的代码基础上进行了一些优化，例如增加了文件自动载入。"),A=c('<p>但最终没选用是因为我做了大量使用场景的测试，发现如果要达到在开发环境下 mock 和真实接口共存，可以快速切换。真实接口的地址必须是域名的二级地址，例如像这样 <code>http://baidu.com/api/</code> ，如果接口地址是 <code>http://baidu.com/</code> 则会出现 mock 文件修改后，所有的 mock 请求拦截都失效了，全部都请求到真实接口地址去了。</p><p>当然如果你的开发场景不需要 mock 和真实接口共存，这个方案还是挺完美的，并且我对比过方案二的源码，其实两者的思路几乎一致的，只是不知道中间哪个环节出了差错，导致出现了这个小 bug 。</p><hr><p>如果你需要在本框架里复原此方案，可以按照下面的步骤一步步操作：</p><p>首先执行 <code>yarn add chokidar body-parser -D</code> 安装两个依赖包，然后将 <code>./src/api/index.js</code> 的 <code>baseURL</code> 注释或设为空，和方案二一样</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> api <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// baseURL: p<wbr>rocess.env.VUE_APP_API_ROOT,</span>\n    timeout<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>\n    responseType<span class="token operator">:</span> <span class="token string">&#39;json&#39;</span>\n    <span class="token comment">// withCredentials: true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>接着在 <code>./src/mock/</code> 目录下新建个文件，例如叫 <code>server-deprecated.js</code> ，然后复制下面代码进去</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> chokidar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;chokidar&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;body-parser&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mockjs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">registerRoutes</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> mockLastIndex\n    <span class="token keyword">let</span> mocksForServer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;src/mock/modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">dirname</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;src/mock/modules&#39;</span><span class="token punctuation">,</span> dirname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> models <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./modules/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> mock <span class="token keyword">of</span> models<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                mocksForServer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                    url<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mock/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mock<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    type<span class="token operator">:</span> mock<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n                    <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;request invoke:&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>path<span class="token punctuation">)</span>\n                        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token operator">?</span> mock<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">:</span> mock<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> mock <span class="token keyword">of</span> mocksForServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 动态新增 express 路由</span>\n        app<span class="token punctuation">[</span>mock<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span>url<span class="token punctuation">,</span> mock<span class="token punctuation">.</span>response<span class="token punctuation">)</span>\n        mockLastIndex <span class="token operator">=</span> app<span class="token punctuation">.</span>_router<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> mockRoutesLength <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>mocksForServer<span class="token punctuation">)</span><span class="token punctuation">.</span>length\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        mockRoutesLength<span class="token operator">:</span> mockRoutesLength<span class="token punctuation">,</span>\n        mockStartIndex<span class="token operator">:</span> mockLastIndex <span class="token operator">-</span> mockRoutesLength\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">unregisterRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span>cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;src/mock/modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">delete</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> server<span class="token punctuation">,</span> compiler</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> server<span class="token punctuation">,</span> compiler<span class="token punctuation">)</span>\n    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        extended<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> mockRoutes <span class="token operator">=</span> <span class="token function">registerRoutes</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>\n    <span class="token keyword">var</span> mockRoutesLength <span class="token operator">=</span> mockRoutes<span class="token punctuation">.</span>mockRoutesLength\n    <span class="token keyword">var</span> mockStartIndex <span class="token operator">=</span> mockRoutes<span class="token punctuation">.</span>mockStartIndex\n\n    chokidar<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;src/mock&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        ignoreInitial<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">===</span> <span class="token string">&#39;change&#39;</span> <span class="token operator">||</span> event <span class="token operator">===</span> <span class="token string">&#39;add&#39;</span> <span class="token operator">||</span> event <span class="token operator">===</span> <span class="token string">&#39;unlink&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token comment">// remove mock routes stack</span>\n                app<span class="token punctuation">.</span>_router<span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>mockStartIndex<span class="token punctuation">,</span> mockRoutesLength<span class="token punctuation">)</span>\n                <span class="token comment">// clear routes cache</span>\n                <span class="token function">unregisterRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n                <span class="token keyword">const</span> mockRoutes <span class="token operator">=</span> <span class="token function">registerRoutes</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>\n                mockRoutesLength <span class="token operator">=</span> mockRoutes<span class="token punctuation">.</span>mockRoutesLength\n                mockStartIndex <span class="token operator">=</span> mockRoutes<span class="token punctuation">.</span>mockStartIndex\n\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n &gt; Mock Server hot reload success! changed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><p>通过源码可以看到，我使用了 <code>fs</code> 模块去读取 <code>./src/mock/modules/</code> 目录下的文件，这是方案一使用的 mock 文件目录，这其实也是这套方案的一个小优势，就是 mock 文件可以和方案一通用。</p><p>然后打开 <code>vue.config.js</code> 修改并设置成</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n        open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token string">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                target<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_API_ROOT</span><span class="token punctuation">,</span>\n                changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token string">&#39;^/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token comment">//重定向代理的路径</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        before<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/mock/server-deprecated.js&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>剩下的操作和方案一类似，在 <code>./src/mock/modules/</code> 目录下新增 js 文件，然后在里面编写 mock 数据代码即可。</p><p>区别在于，mock 和真实接口切换调试则是需要把 <code>/mock</code> 换成 <code>/api</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// mock</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;mock/test&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 真实接口</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;api/test&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><blockquote><p>三种方案均支持开发环境下 mock 和真实接口的快速切换，其中弃用方案稍微有一点限制</p></blockquote><p>方案一适合简单场景，并且线上环境如果也需要调用 mock 数据，那只能选这种，本框架演示站的登录以及权限获取就是使用此方案。</p><p>方案二因为启用了真实 server ，所以适合复杂场景，加上会触发真实网络请求，开发效率比方案一高，并且 mock 文件的编写更容易上手，缺点是 mock 文件无法和方案一共用，如果你即需要使用方案二，又要在线上环境调用 mock 数据，那就需要你维护两份 mock 文件。</p><p>弃用方案与方案二类似，优点在于 mock 文件可与方案一共用，只需维护一份 mock 文件，缺点就是真实接口地址必须是二级地址，不然会有 bug 。</p>',19);l.render=function(o,c){const l=n("OutboundLink");return s(),a(e,null,[u,p("p",null,[i,p("a",r,[k,t(l)]),b]),m,p("p",null,[p("img",{src:o.$withBase("/vue2/mock1.png")},null,8,d)]),g,p("p",null,[h,p("a",v,[f,t(l)]),j,y,w,x,R]),_,p("p",null,[P,p("a",O,[L,t(l)]),q]),A],64)};export{l as default};

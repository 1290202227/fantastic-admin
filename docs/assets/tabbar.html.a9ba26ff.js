import{r as a,o as n,c as s,a as e,b as t,F as p,e as o,d as r}from"./app.8da6f55f.js";const c={},l={id:"标签栏",tabindex:"-1"},i=e("a",{class:"header-anchor",href:"#标签栏","aria-hidden":"true"},"#",-1),u=o(" 标签栏 "),d=e("h2",{id:"功能介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#功能介绍","aria-hidden":"true"},"#"),o(" 功能介绍")],-1),h=e("h3",{id:"刷新",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#刷新","aria-hidden":"true"},"#"),o(" 刷新")],-1),k=e("p",null,"对当前标签页进行刷新，非激活的标签页无法刷新，并且刷新操作会强制清除页面缓存数据。",-1),b=["src"],g=e("h3",{id:"关闭",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#关闭","aria-hidden":"true"},"#"),o(" 关闭")],-1),f=e("p",null,"关闭标签页分关闭当前、关闭其它、关闭左侧、关闭右侧，当不满足关闭条件时，选项置灰，无法点击。",-1),m=["src"],v=e("h3",{id:"固定",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#固定","aria-hidden":"true"},"#"),o(" 固定")],-1),x=e("p",null,"将指定标签页设为固定状态，固定的标签页右键无法直接关闭，同时也不会被关闭其它、关闭左侧、关闭右侧标签页操作所关闭。并且固定的标签页会被记录到浏览器缓存，下次访问将保留固定标签页状态。",-1),j=["src"],w=e("h3",{id:"最大化",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#最大化","aria-hidden":"true"},"#"),o(" 最大化")],-1),$=e("p",null,"通过隐藏导航栏和顶栏，将操作内容区最大化。双击标签页可快速进入最大化。",-1),B=["src"],M=e("h3",{id:"拖拽排序",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#拖拽排序","aria-hidden":"true"},"#"),o(" 拖拽排序")],-1),I=["src"],T=r('<h2 id="开启标签栏" tabindex="-1"><a class="header-anchor" href="#开启标签栏" aria-hidden="true">#</a> 开启标签栏</h2><p>只需在框架配置里修改设置即可开启，标签栏支持右键更多操作。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>enableTabbar<span class="token operator">:</span> <span class="token boolean">true</span>\n</code></pre></div><h2 id="标签页合并" tabindex="-1"><a class="header-anchor" href="#标签页合并" aria-hidden="true">#</a> 标签页合并</h2><p>当标签栏开启时，框架还提供一个配置属性，即标签页是否合并，首先先看下面这段路由配置。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/news&#39;</span><span class="token punctuation">,</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            path<span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;NewsList&#39;</span>\n            meta<span class="token operator">:</span> <span class="token punctuation">{</span>\n                title<span class="token operator">:</span> <span class="token string">&#39;新闻列表&#39;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            path<span class="token operator">:</span> <span class="token string">&#39;detail/:id&#39;</span><span class="token punctuation">,</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;NewsDetail&#39;</span><span class="token punctuation">,</span>\n            meta<span class="token operator">:</span> <span class="token punctuation">{</span>\n                title<span class="token operator">:</span> <span class="token string">&#39;新闻详情&#39;</span><span class="token punctuation">,</span>\n                sidebar<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                activeMenu<span class="token operator">:</span> <span class="token string">&#39;/news/list&#39;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            path<span class="token operator">:</span> <span class="token string">&#39;create&#39;</span><span class="token punctuation">,</span>\n            name<span class="token operator">:</span> <span class="token string">&#39;NewsCreate&#39;</span><span class="token punctuation">,</span>\n            meta<span class="token operator">:</span> <span class="token punctuation">{</span>\n                title<span class="token operator">:</span> <span class="token string">&#39;新增新闻&#39;</span><span class="token punctuation">,</span>\n                sidebar<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                activeMenu<span class="token operator">:</span> <span class="token string">&#39;/news/list&#39;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>当设置标签页不合并时，从<strong>新闻列表页</strong>进入<strong>新闻详情页</strong>，框架会新增一个<em>新闻详情</em>的标签页，配置如下。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>enableTabbarMergeTabs<span class="token operator">:</span> <span class="token boolean">false</span>\n</code></pre></div>',8),N=["src"],y=r('<p>而设置当标签栏合并时，从<strong>新闻列表页</strong>进入<strong>新闻详情页</strong>，框架会将<em>新闻列表</em>的标签页，替换成<em>新闻详情</em>的标签页，始终只保持一个标签页，配置如下。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>enableTabbarMergeTabs<span class="token operator">:</span> <span class="token boolean">true</span>\n</code></pre></div>',2),L=["src"],z=r('<p>这其中的关键条件就是 <code>activeMenu</code> 这个参数，也就是框架会将设置过 <code>activeMenu</code> 的路由与 <code>activeMenu</code> 指向的目标路由合并为一个标签页，当在这些路由里相互跳转时，始终只保持一个标签页。</p><p>通常使用场景是将同个模块的路由合并成一个标签页，使标签栏看上去相对简洁明了。</p><h2 id="全局方法" tabindex="-1"><a class="header-anchor" href="#全局方法" aria-hidden="true">#</a> 全局方法</h2><h3 id="获取当前标签页-tabid" tabindex="-1"><a class="header-anchor" href="#获取当前标签页-tabid" aria-hidden="true">#</a> 获取当前标签页 tabId</h3><p><code>this.$tabbar.getId()</code></p><h3 id="关闭指定标签页" tabindex="-1"><a class="header-anchor" href="#关闭指定标签页" aria-hidden="true">#</a> 关闭指定标签页</h3><p><code>this.$tabbar.closeById(tabId)</code></p><p>该方法接收一个 <code>tabId</code> 参数</p><h3 id="关闭当前标签页" tabindex="-1"><a class="header-anchor" href="#关闭当前标签页" aria-hidden="true">#</a> 关闭当前标签页</h3><p><code>this.$tabbar.close(to)</code></p>',10),C=o("该方法接收一个 "),D=e("code",null,"to",-1),F=o(" 参数，该参数与 "),O=e("code",null,"router.push(to)",-1),_=o(" 一致，表示关闭当前标签页并跳转到指定路由，点击阅读"),q={href:"https://next.router.vuejs.org/zh/api/#routelocationraw",target:"_blank",rel:"noopener noreferrer"},A=o("参数说明"),E=o("。");c.render=function(o,r){const c=a("Badge"),G=a("OutboundLink");return n(),s(p,null,[e("h1",l,[i,u,t(c,{type:"tip",text:"专业版",vertical:"top"})]),d,h,k,e("p",null,[e("img",{src:o.$withBase("/tabbar1.gif")},null,8,b)]),g,f,e("p",null,[e("img",{src:o.$withBase("/tabbar2.gif")},null,8,m)]),v,x,e("p",null,[e("img",{src:o.$withBase("/tabbar3.gif")},null,8,j)]),w,$,e("p",null,[e("img",{src:o.$withBase("/tabbar4.gif")},null,8,B)]),M,e("p",null,[e("img",{src:o.$withBase("/tabbar5.gif")},null,8,I)]),T,e("p",null,[e("img",{src:o.$withBase("/tabbar-no-merge.gif")},null,8,N)]),y,e("p",null,[e("img",{src:o.$withBase("/tabbar-merge.gif")},null,8,L)]),z,e("p",null,[C,D,F,O,_,e("a",q,[A,t(G)]),E])],64)};export{c as default};

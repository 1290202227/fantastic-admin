import{r as a,c as n,a as s,b as t,F as p,e,d as o,o as c}from"./app.b83c852d.js";import{_ as l}from"./plugin-vue_export-helper.5a098b48.js";const u={},i=e('<h1 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h1><h2 id="替换真实的后端接口后-登录成功依旧在登录页" tabindex="-1"><a class="header-anchor" href="#替换真实的后端接口后-登录成功依旧在登录页" aria-hidden="true">#</a> 替换真实的后端接口后，登录成功依旧在登录页</h2><p>你需要对几处代码分别检查是否都有根据实际情况进行修改：</p><ol><li>在 <code>.env.development</code> 里修改真实接口请求地址</li><li>因为真实接口返回的数据格式与框架演示提供的返回格式一定存在差异，所以需要在 <code>/src/api/index.js</code> 里修改响应拦截器里的代码，按照实际情况进行调整。例如什么状态下是请求成功，什么状态下是请求异常，并进行错误提示。</li><li>在 <code>/src/store/modules/user.js</code> 里分别修改 <code>action</code> 下的 <code>login</code> 和 <code>mutations</code> 下的 <code>setUserData</code> ，确保接口可以请求成功，并将返回的用户信息存储到 vuex 中进行全局管理。最后还需要修改 <code>getters</code> 下的 <code>isLogin</code> ，这部分需要根据实际存储的用户信息去判断是否登录。例如框架演示登录是会返回 token 和失效时间，则验证是否登录也是通过这两个信息进行逻辑校验。</li></ol><h2 id="使用-script-setup-语法糖如何设置组件-name" tabindex="-1"><a class="header-anchor" href="#使用-script-setup-语法糖如何设置组件-name" aria-hidden="true">#</a> 使用 <code>&lt;script setup&gt;</code> 语法糖如何设置组件 name</h2><p><code>&lt;script setup&gt;</code> 可以和普通的 <code>&lt;script&gt;</code> 一起使用，所以可以这样：</p><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;componentName&#39;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token operator">...</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',7),r=o("另外框架引用了 "),k={href:"https://github.com/anncwb/vite-plugin-vue-setup-extend",target:"_blank",rel:"noopener noreferrer"},g=o("vite-plugin-vue-setup-extend"),d=o(" 依赖，所以可以更方便的设置。"),h=e('<div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>componentName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token operator">...</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="项目-url-里的-号能不能去掉" tabindex="-1"><a class="header-anchor" href="#项目-url-里的-号能不能去掉" aria-hidden="true">#</a> 项目 URL 里的 # 号能不能去掉</h2>',2),v=o("这是因为路由默认使用的是 Hash 模式，你可以在 "),m=s("code",null,"/src/router/index.js",-1),x=o(" 修改为 HTML5 模式，但需要注意，开启 HTML5 模式，服务器也需要做相应的配置调整，详细请阅读《"),f={href:"https://next.router.vuejs.org/zh/guide/essentials/history-mode.html",target:"_blank",rel:"noopener noreferrer"},b=o("Vue-router 不同的历史模式"),j=o("》。"),L=e('<h2 id="页面切换后显示空白" tabindex="-1"><a class="header-anchor" href="#页面切换后显示空白" aria-hidden="true">#</a> 页面切换后显示空白</h2><p>因为路由切换有使用到 <code>&lt;transition&gt;</code> 动画，而 <code>&lt;transition&gt;</code> 组件无法处理多个根节点的组件，所以请检查路由对应所有的页面文件的根节点是否均为单个。</p><p>错误示例：</p><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 需要注意，注释也会被视为一个节点 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>text h1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>text h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>正确示例：</p><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- 需要注意，注释也会被视为一个节点 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>text h1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>text h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',6),_=o("相关 "),q={href:"https://github.com/vuejs/vue-next/issues/1850",target:"_blank",rel:"noopener noreferrer"},w=o("Issue"),y=o(" 说明");var H=l(u,[["render",function(e,o){const l=a("OutboundLink");return c(),n(p,null,[i,s("p",null,[r,s("a",k,[g,t(l)]),d]),h,s("p",null,[v,m,x,s("a",f,[b,t(l)]),j]),L,s("p",null,[_,s("a",q,[w,t(l)]),y])],64)}]]);export{H as default};
